main:
  params: [args]
  steps:
    - init:
        assign:
          - error_response:
              - error: "未提供有效輸入。請提供 'text' 或 'audio_path'"
              - timestamp: ${time.format(sys.now())}
          - execution_id: ${sys.get_env("WORKFLOW_EXECUTION_ID")}
          - timestamp: ${time.format(sys.now())}
          - base_url: "https://asia-east1-genasl.cloudfunctions.net"

    - validateInput:
        switch:
          - condition: ${args == null}
            next: returnError
          - condition: ${"text" in args}
            assign:
              - text_for_gloss:
                  - ${args.text}
            next: convertToGloss
          - condition: ${"audio_path" in args}
            next: processAudio
          - condition: ${true}
            next: returnError

    - returnError:
        return: ${error_response}

    - processAudio:
        try:
          call: http.post
          args:
            url: ${base_url + "/process-audio"}
            body:
              audio_path: ${args.audio_path}
            auth:
              type: OIDC
          result: audio_response
        except:
          as: e
          steps:
            - handleAudioException:
                return:
                  - error: "音頻處理失敗"
                  - details: ${e}
                  - stage: "audio_processing"
                  - timestamp: ${timestamp}

    - convertAudioToText:
        try:
          call: http.post
          args:
            url: ${base_url + "/speech-to-text"}
            body:
              content: ${audio_response.body.content}
            auth:
              type: OIDC
          result: stt_response
        except:
          as: e
          steps:
            - handleSTTException:
                return:
                  - error: "語音轉文字失敗"
                  - details: ${e}
                  - stage: "speech_to_text"
                  - timestamp: ${timestamp}

    - processSTTResponse:
        assign:
          - text_for_gloss:
              - ${stt_response.body.text}

    - convertToGloss:
        try:
          call: http.post
          args:
            url: ${base_url + "/text-to-gloss"}
            body:
              text: ${text_for_gloss[0]}
            auth:
              type: OIDC
          result: gloss_response
        except:
          as: e
          steps:
            - handleGlossException:
                return:
                  - error: "Gloss 轉換失敗"
                  - details: ${e}
                  - stage: "gloss_conversion"
                  - timestamp: ${timestamp}

    - getVideos:
        try:
          call: http.post
          args:
            url: ${base_url + "/gloss-to-video"}
            body:
              gloss: ${gloss_response.body.gloss}
            auth:
              type: OIDC
          result: video_response
        except:
          as: e
          steps:
            - handleVideoException:
                return:
                  error: "影片查詢失敗"
                  details: ${e}
                  stage: "video_lookup"
                  timestamp: ${timestamp}

    - prepareResult:
        assign:
          - result:
              - success: true
              - original_input: ${args}
              - gloss_response: ${gloss_response.body}
              - video_response: ${video_response.body}
              - execution_info:
                  - execution_id: ${execution_id}
                  - timestamp: ${timestamp}

    - returnResult:
        return: ${result}