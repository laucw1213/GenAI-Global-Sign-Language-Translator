main:
  params: [args]
  steps:
    # 初始化
    - init:
        assign:
          - error_response:
              error: "未提供有效輸入。請提供 'text' 或 'audio_path'"

    # 驗證輸入
    - validateInput:
        switch:
          - condition: ${args == null}
            return: ${error_response}
          - condition: ${"text" in args}
            assign:
              - text_for_gloss: ${args.text}
            next: convertToGloss
          - condition: ${"audio_path" in args}
            next: processAudio
          - condition: ${true}
            return: ${error_response}

    # 處理音頻
    - processAudio:
        try:
          steps:
            - processAudioToText:
                call: http.post
                args:
                  url: 'https://asia-east1-genasl.cloudfunctions.net/process-audio'
                  body:
                    file_path: ${args.audio_path}
                  auth:
                    type: OIDC
                result: audio_response

            - convertToText:
                call: http.post
                args:
                  url: 'https://asia-east1-genasl.cloudfunctions.net/speech-to-text'
                  body:
                    content: ${audio_response.body.content}
                  auth:
                    type: OIDC
                result: stt_response

            - prepareText:
                assign:
                  - text_for_gloss: ${json.decode(stt_response.body).text}
                next: convertToGloss
        except:
          as: e
          steps:
            - handleAudioError:
                return:
                  error: "音頻處理失敗"
                  details: ${json.encode(e)}

    # 文本轉 Gloss
    - convertToGloss:
        try:
          call: http.post
          args:
            url: 'https://asia-east1-genasl.cloudfunctions.net/text-to-gloss'
            body:
              text: ${text_for_gloss}
            auth:
              type: OIDC
          result: gloss_response
        except:
          as: e
          steps:
            - handleGlossError:
                return:
                  error: "Gloss 轉換失敗"
                  details: ${json.encode(e)}

    # Gloss 轉影片
    - getVideos:
        try:
          call: http.post
          args:
            url: 'https://asia-east1-genasl.cloudfunctions.net/gloss-to-video'
            body:
              gloss: ${json.decode(gloss_response.body).gloss}
            auth:
              type: OIDC
          result: video_response
        except:
          as: e
          steps:
            - handleVideoError:
                return:
                  error: "影片查詢失敗"
                  details: ${json.encode(e)}

    # 準備視頻路徑
    - prepareVideoPaths:
        assign:
          - video_response_str: ${json.encode(video_response.body)}
          - video_data: ${json.decode(video_response_str)}
          - video_paths: []

    # 提取視頻路徑
    - extractPaths:
        for:
          value: mapping
          in: ${video_data.video_mappings}
          steps:
            - appendPath:
                assign:
                  - video_paths: ${list.concat(video_paths, mapping.video_path)}

    # 打印調試信息
    - debugVideoPaths:
        assign:
          - debug_info:
              paths: ${video_paths}
              path_count: ${len(video_paths)}

    # 合併影片
    - mergeVideos:
        try:
          call: http.post
          args:
            url: 'https://asia-east1-genasl.cloudfunctions.net/merge_videos'
            body:
              video_paths: ${video_paths}
              id: ${sys.get_env("WORKFLOW_EXECUTION_ID")}
            auth:
              type: OIDC
          result: merged_video_response
        except:
          as: e
          steps:
            - prepareMergeError:
                assign:
                  - error_details: ${json.decode(json.encode(e))}
                  - error_obj: 
                      error: "影片合併失敗"
                      details: ${error_details}
                      debug: ${debug_info}
            - handleMergeError:
                return: ${error_obj}

    # 準備結果
    - prepareResult:
        try:
          assign:
            - final_result:
                gloss_response: ${json.decode(json.encode(gloss_response.body))}
                video_response: ${json.decode(json.encode(video_response.body))}
                merged_video_response: ${json.decode(json.encode(merged_video_response.body))}
                original_text: ${text_for_gloss}
        except:
          as: e
          steps:
            - prepareReturnError:
                assign:
                  - error_details: ${json.decode(json.encode(e))}
                  - error_obj:
                      error: "結果處理失敗"
                      details: ${error_details}
                      original_text: ${text_for_gloss}
            - handleReturnError:
                return: ${error_obj}

    # 返回結果
    - returnResult:
        return: ${final_result}