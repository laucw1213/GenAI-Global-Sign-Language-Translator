main:
  params: [args]
  steps:
    - init:
        assign:
          - error_response: { success: false, error: "Input not provided", timestamp: '${time.format(sys.now())}' }
          - timestamp: '${time.format(sys.now())}'
          - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}

    - logInit:
        call: sys.log
        args:
          text: '${time.format(sys.now())}'

    - validateInput:
        switch:
          - condition: ${args == null}
            next: returnError
          - condition: ${"text" in args}
            assign:
              - input_text: ${args.text}
            next: logInput
          - condition: ${true}
            next: returnError

    - logInput:
        call: sys.log
        args:
          text: '${input_text}'
        next: checkSentenceCache

    - checkSentenceCache:
        try:
          call: googleapis.firestore.v1.projects.databases.documents.get
          args:
            name: ${"projects/" + project_id + "/databases/(default)/documents/sentence_cache/" + input_text}
          result: cache_result
        except:
          as: e
          steps:
            - logCacheError:
                call: sys.log
                args:
                  text: '${"Cache check error: " + json.encode_to_string(e)}'
            - continueToLangDetect:
                next: callDetectLanguage
        next: processCacheResult

    - processCacheResult:
        steps:
          - logCacheResult:
              call: sys.log
              args:
                text: '${json.encode_to_string(cache_result)}'
          - checkCache:
              try:
                assign:
                  - has_cache: ${cache_result != null and "fields" in cache_result and "gloss_text" in cache_result.fields and "video_mappings" in cache_result.fields}
                  - cache_log: '${"Cache check result: " + input_text}'
              except:
                as: e
                steps:
                  - logCacheCheckError:
                      call: sys.log
                      args:
                        text: '${json.encode_to_string(e)}'
                  - setDefaults:
                      assign:
                        - has_cache: false
                        - cache_log: "Cache check failed"
          - logCacheStatus:
              call: sys.log
              args:
                text: '${cache_log}'
          - decidePath:
              switch:
                - condition: ${has_cache}
                  steps:
                    - useCache:
                        steps:
                          - assignBasics:
                              assign:
                                - gloss_text: ${cache_result.fields.gloss_text.stringValue}
                                - video_mappings: ${cache_result.fields.video_mappings.arrayValue.values}
                                - english_text: ${input_text}
                        next: prepareResult
                - condition: ${true}
                  next: callDetectLanguage

    - callDetectLanguage:
        call: googleapis.translate.v3.projects.locations.detectLanguage
        args:
          parent: ${"projects/" + project_id + "/locations/global"}
          body:
            content: ${input_text}
            mimeType: "text/plain"
        result: detection_result

    - logDetection:
        call: sys.log
        args:
          text: '${detection_result.languages[0].languageCode}'

    - translateIfNeeded:
        switch:
          - condition: ${detection_result.languages[0].languageCode == "en"}
            assign:
              - english_text: ${input_text}
            next: logEnglishText
          - condition: ${true}
            next: callTranslateText

    - callTranslateText:
        call: googleapis.translate.v3.projects.locations.translateText
        args:
          parent: ${"projects/" + project_id + "/locations/global"}
          body:
            contents: ${input_text}
            sourceLanguageCode: ${detection_result.languages[0].languageCode}
            targetLanguageCode: "en"
            mimeType: "text/plain"
        result: translation_result

    - setEnglishText:
        assign:
          - english_text: ${translation_result.translations[0].translatedText}

    - logEnglishText:
        call: sys.log
        args:
          text: '${english_text}'
        next: prepareGeminiRequest

    - prepareGeminiRequest:
        assign:
          - promptString: |-
              Convert to ASL gloss notation using only words from our dataset. Rules:

              1. ALL CAPS for ALL words
              2. Keep: nouns, verbs, adjectives, adverbs, numbers, pronouns, AND/OR/BUT/IF/BECAUSE
              3. Remove: a/an/the, be verbs (am/is/are/was/were), most prepositions
              4. Time markers at beginning: YESTERDAY, TOMORROW, MORNING, AFTERNOON, NIGHT, NEXT_WEEK, FINISH
              5. For questions: use question words (WHAT, WHERE, WHO, WHY, HOW) in original position
              6. Negation: Use NOT after the verb (e.g., "I don't like" becomes "I LIKE NOT")
              7. For continuous actions: Repeat word (e.g., "walking continuously" becomes "WALK WALK")
              8. Geographic locations: Use exact country/city names from dataset (e.g., AMERICA, CHINA, NEW_YORK, HONG_KONG)
              9. NO punctuation marks of any kind
              10. Use space between words

              Examples:
              - "I am going to the store tomorrow" → "TOMORROW STORE I GO"
              - "Do you want coffee or tea?" → "YOU WANT COFFEE OR TEA"
              - "She doesn't understand the question" → "SHE UNDERSTAND NOT QUESTION"
              - "The man in the blue shirt is my brother" → "MAN BLUE SHIRT BROTHER"
              - "I have been waiting for a long time" → "I WAIT WAIT LONG TIME"
              - "I want to visit New York next year" → "NEXT_YEAR I WANT VISIT NEW_YORK"

              Return ONLY gloss words in a single line without any punctuation, extra spaces or newlines. Use ONLY words from our ASL dataset.
          - combinedText: ${promptString + "The above is the Rules and below is the INPUT TEXT:" + english_text}
        next: callGenerateGloss

    # 调用 Gemini 2.0 Flash 模型，使用 OAuth2 进行认证
    - callGenerateGloss:
        call: http.post
        args:
          url: ${"https://us-central1-aiplatform.googleapis.com/v1/projects/" + project_id + "/locations/us-central1/publishers/google/models/gemini-2.0-flash:generateContent"}
          auth:
            type: OAuth2
          headers:
            Content-Type: "application/json"
          body:
            contents:
              - role: "user"
                parts:
                  - text: ${combinedText}
        result: gloss_result

    - logGlossRaw:
        call: sys.log
        args:
          text: '${json.encode_to_string(gloss_result)}'

    - processGlossResult:
        switch:
          - condition: ${ "body" in gloss_result and "candidates" in gloss_result.body and gloss_result.body.candidates[0].content.parts[0].text != null }
            assign:
              - gloss_text: ${ text.replace_all_regex(gloss_result.body.candidates[0].content.parts[0].text, "\n", "") }
            next: logProcessedGloss
          - condition: ${true}
            next: prepareErrorResult

    - logProcessedGloss:
        call: sys.log
        args:
          text: '${gloss_text}'
        next: splitGlossText

    - splitGlossText:
        assign:
          - characters: ${text.split(gloss_text, " ")}
        next: initVideoMapping

    - initVideoMapping:
        assign:
          - video_mappings: []
          - current_index: 0
        next: processMapping

    - processMapping:
        switch:
          - condition: ${current_index < len(characters)}
            steps:
              - queryVideo:
                  try:
                    call: googleapis.firestore.v1.projects.databases.documents.get
                    args:
                      name: ${"projects/" + project_id + "/databases/(default)/documents/asl_mappings2/" + characters[current_index]}
                    result: current_result
                  except:
                    as: e
                    steps:
                      - handleQueryError:
                          assign:
                            # Assign an object with an 'error' field to mimic the structure checked later
                            - current_result: { "error": '${"Firestore get error: " + json.encode_to_string(e)}' }
                  next: logResponse # Point to the added logResponse step
              - logResponse: # Added logResponse step back
                  call: sys.log
                  args:
                    text: ${json.encode_to_string(current_result)}
                  next: processResult
              - processResult:
                  switch:
                    # Check for error field first, then check the structure from the connector result
                    - condition: ${ not("error" in current_result) and "fields" in current_result and "video_url" in current_result.fields }
                      steps:
                        - addMapping:
                            assign:
                              - current_mapping:
                                  mapValue:
                                    fields:
                                      gloss:
                                        stringValue: ${characters[current_index]}
                                      video_url:
                                        # Access fields directly from current_result
                                        stringValue: ${current_result.fields.video_url.stringValue}
                              - video_mappings: ${list.concat(video_mappings, current_mapping)}
                              - current_index: ${current_index + 1}
                            next: processMapping
                    - condition: ${true}
                      steps:
                        - skipMapping:
                            steps:
                              - createMappings:
                                  assign:
                                    - current_mapping:
                                        mapValue:
                                          fields:
                                            gloss:
                                              stringValue: ${characters[current_index]}
                                            error:
                                              stringValue: "No video mapping found for gloss"
                              - updateArrays:
                                  assign:
                                    - video_mappings: ${list.concat(video_mappings, current_mapping)}
                                    - current_index: ${current_index + 1}
                            next: processMapping
          - condition: ${true}
            next: saveSentenceCache


    - saveSentenceCache:
        try:
          call: googleapis.firestore.v1.projects.databases.documents.createDocument
          args:
            parent: ${"projects/" + project_id + "/databases/(default)/documents"}
            collectionId: "sentence_cache"
            documentId: ${input_text}
            body:
              fields:
                gloss_text: 
                  stringValue: ${gloss_text}
                video_mappings:
                  arrayValue:
                    values: ${video_mappings}
                timestamp:
                  timestampValue: ${time.format(sys.now())}
          result: save_result
        except:
          as: e
          steps:
            - logSaveError:
                call: sys.log
                args:
                  text: '${"Cache save error: " + json.encode_to_string(e)}'
        next: prepareResult

    - prepareResult:
        steps:
          - initSimplifiedArrays:
              assign:
                - simplified_videos: []
                - video_index: 0
          - processVideos:
              switch:
                - condition: ${video_index < len(video_mappings)}
                  steps:
                    - extractVideoData:
                        steps:
                          - checkVideoUrl:
                              assign:
                                - has_video_url: ${"video_url" in video_mappings[video_index].mapValue.fields}
                                - video_url_value: ""
                          - setVideoUrl:
                              switch:
                                - condition: ${has_video_url}
                                  assign:
                                    - video_url_value: ${video_mappings[video_index].mapValue.fields.video_url.stringValue}
                          - createVideoObject:
                              assign:
                                - current_video:
                                    gloss: ${video_mappings[video_index].mapValue.fields.gloss.stringValue}
                                    video_url: ${video_url_value}
                                - simplified_videos: ${list.concat(simplified_videos, [current_video])}
                                - video_index: ${video_index + 1}
                    - continueVideoLoop:
                        next: processVideos
                - condition: ${true}
                  next: createResult
          - createResult:
              assign:
                - result:
                    original_input: ${input_text}
                    gloss: ${gloss_text}
                    videos: ${simplified_videos}
              next: logSuccess

    - logSuccess:
        call: sys.log
        args:
          text: 'Success'
        next: returnResult

    - prepareErrorResult:
        assign:
          - result:
              success: false
              error: "Failed to generate gloss text"
              original_input: ${input_text}
              timestamp: '${time.format(sys.now())}'
        next: logError

    - logError:
        call: sys.log
        args:
          text: 'Error'
        next: returnResult

    - returnResult:
        return: ${result}

    - returnError:
        return: ${error_response}
